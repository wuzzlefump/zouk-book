{"version":3,"sources":["screens/Moves/style.module.css","components/AgGrid/AgGrid.tsx","components/AgGrid/AgGrid.module.css","screens/Moves/SFMoves.tsx"],"names":["module","exports","AgGrid","props","gridOptions","columns","height","width","containerClassName","className","styles","grid","cx","style","maxWidth","map","item","i","SFMoves","history","useHistory","currentName","useParams","name","currentMove","SFMovesList","find","enum","window","innerWidth","moveContainer","select","onChange","e","NewName","undefined","target","value","description","steps","push","items","x","field","rowData"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,cAAgB,+B,0ICarBC,EAAS,SAACC,GAMhB,IACGC,EAA4DD,EAA5DC,YAAaC,EAA+CF,EAA/CE,QAASC,EAAsCH,EAAtCG,OAAQC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBAE7C,OACE,qBAAKC,UAAWC,IAAOC,KAAvB,SACE,qBACEF,UAAWG,YAAG,CAAC,kBAAmBJ,IAClCK,MAAO,CAAEP,OAAQA,EAAQQ,SAAUP,GAFrC,SAIE,cAAC,cAAD,2BAAiBH,GAAjB,aACGC,EAAQU,KAAI,SAACC,EAAMC,GAAP,OACX,cAAC,eAAD,eAA0BD,GAAPC,e,mBC9B/BjB,EAAOC,QAAU,CAAC,KAAO,uB,gmMCDzB,uGAMe,SAASiB,IAAW,IAAD,IAC1BC,EAAUC,cAEZC,EADWC,cACUC,KACrBC,EAAcC,EAAYC,MAAK,SAACV,GAClC,OAAOA,EAAKW,OAASN,KAkBvB,OACE,sBACER,MAAO,CAAEC,SAAUc,OAAOC,YAC1BpB,UAAWC,IAAOoB,cAFpB,UAIE,oBAAIrB,UAAWC,IAAOqB,OAAtB,0BAA+BP,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAaD,YAA5C,QAAoD,kBACpD,yBACES,SAAU,SAACC,GACT,IAAIC,OAGKC,IAFPV,EAAYC,MAAK,SAACV,GAChB,OAAOA,EAAKO,OAASU,EAAEG,OAAOC,SAE5B,CAAEV,KAAM,GAAIJ,KAAM,GAAIe,YAAa,GAAIC,MAAO,IAC9Cd,EAAYC,MAAK,SAACV,GAChB,OAAOA,EAAKO,OAASU,EAAEG,OAAOC,cAEjBF,IAAjBD,EAAQP,MACVR,EAAQqB,KAAR,oBAA0BN,EAAQP,QAXxC,UAeE,mDACCF,EAAYV,KAAI,SAAC0B,EAAYC,GAC5B,OAAO,iCAAiBD,EAAMlB,MAAVmB,SAGxB,cAAC,IAAD,CACErC,QAAS,CACP,CAAEsC,MAAO,QACT,CAAEA,MAAO,SACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,YACT,CAAEA,MAAO,SAEXrC,OAAQ,IACRC,MAAOqB,OAAOC,WACdzB,YAAa,CAAEwC,QAAO,iBAAEpB,QAAF,IAAEA,OAAF,EAAEA,EAAae,aAAf,QAAwB","file":"static/js/8.74d9412d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"moveContainer\":\"style_moveContainer__ICRKg\"};","import * as React from \"react\";\nimport cx from \"classcat\";\nimport {\n  AgGridColumn,\n  AgGridReact,\n  AgGridReactProps,\n  AgGridColumnGroupProps,\n  AgGridColumnProps,\n} from \"ag-grid-react\";\nimport styles from \"./AgGrid.module.css\";\n// ag stylings\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\n// ag stylings\nexport const AgGrid = (props: {\n  gridOptions?: AgGridReactProps[\"gridOptions\"];\n  columns: AgGridColumnProps[];\n  height?: number | string;\n  width?: number | string;\n  containerClassName?: string;\n}) => {\n  const { gridOptions, columns, height, width, containerClassName } = props;\n\n  return (\n    <div className={styles.grid}>\n      <div\n        className={cx([\"ag-theme-alpine\", containerClassName])}\n        style={{ height: height, maxWidth: width }}\n      >\n        <AgGridReact {...gridOptions}>\n          {columns.map((item, i) => (\n            <AgGridColumn key={i} {...item} />\n          ))}\n        </AgGridReact>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"AgGrid_grid__11L6p\"};","import * as React from \"react\";\nimport styles from \"./style.module.css\";\nimport { AgGrid } from \"../../components/AgGrid/AgGrid\";\nimport { useParams, useHistory } from \"react-router\";\nimport SFMovesList from \"./SFList.json\";\n\nexport default function SFMoves() {\n  const history = useHistory();\n  const params = useParams<{ name: string }>();\n  let currentName = params.name;\n  let currentMove = SFMovesList.find((item: any) => {\n    return item.enum === currentName;\n  });\n\n  type tsteps = {\n    step: string;\n    count: string;\n    footPosition: string;\n    amountOfTurn: string;\n    footwork: string;\n    lead: string;\n  };\n  type tmoves = {\n    enum: string;\n    name: string;\n    description: string;\n    steps: Array<tsteps>;\n  };\n\n  return (\n    <div\n      style={{ maxWidth: window.innerWidth }}\n      className={styles.moveContainer}\n    >\n      <h2 className={styles.select}>{currentMove?.name ?? \"Choose a Move\"}</h2>\n      <select\n        onChange={(e) => {\n          let NewName: any =\n            SFMovesList.find((item) => {\n              return item.name === e.target.value;\n            }) === undefined\n              ? { enum: \"\", name: \"\", description: \"\", steps: [] }\n              : SFMovesList.find((item) => {\n                  return item.name === e.target.value;\n                });\n          if (NewName.enum !== undefined) {\n            history.push(`/moves/sf/${NewName.enum}`);\n          }\n        }}\n      >\n        <option>Choose a Move</option>\n        {SFMovesList.map((items: any, x) => {\n          return <option key={x}>{items.name}</option>;\n        })}\n      </select>\n      <AgGrid\n        columns={[\n          { field: \"step\" },\n          { field: \"count\" },\n          { field: \"footPosition\" },\n          { field: \"amountOfTurn\" },\n          { field: \"footwork\" },\n          { field: \"lead\" },\n        ]}\n        height={600}\n        width={window.innerWidth}\n        gridOptions={{ rowData: currentMove?.steps ?? [] }}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}