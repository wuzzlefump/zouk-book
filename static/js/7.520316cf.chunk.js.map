{"version":3,"sources":["screens/Moves/style.module.css","components/AgGrid/AgGrid.tsx","components/AgGrid/AgGrid.module.css","screens/Moves/GoldMoves.tsx"],"names":["module","exports","AgGrid","props","gridOptions","columns","height","width","containerClassName","className","styles","grid","cx","style","maxWidth","map","item","i","GoldMoves","useParams","window","innerWidth","moveContainer","onChange","e","MovesList","items","x","name","field","rowData"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,cAAgB,+B,0ICarBC,EAAS,SAACC,GAMhB,IACGC,EAA4DD,EAA5DC,YAAaC,EAA+CF,EAA/CE,QAASC,EAAsCH,EAAtCG,OAAQC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBAE7C,OACE,qBAAKC,UAAWC,IAAOC,KAAvB,SACE,qBACEF,UAAWG,YAAG,CAAC,kBAAmBJ,IAClCK,MAAO,CAAEP,OAAQA,EAAQQ,SAAUP,GAFrC,SAIE,cAAC,cAAD,2BAAiBH,GAAjB,aACGC,EAAQU,KAAI,SAACC,EAAMC,GAAP,OACX,cAAC,eAAD,eAA0BD,GAAPC,e,mBC9B/BjB,EAAOC,QAAU,CAAC,KAAO,uB,4wCCDzB,uGAMe,SAASiB,IACPC,cAef,OACE,sBACEN,MAAO,CAAEC,SAAUM,OAAOC,YAC1BZ,UAAWC,IAAOY,cAFpB,UAKE,yBACEC,SAAU,SAACC,KADb,UAKE,mDACCC,EAAUV,KAAI,SAACW,EAAeC,GAC7B,OAAO,iCAAiBD,EAAME,MAAVD,SAGxB,cAAC,IAAD,CACEtB,QAAS,CACP,CAAEwB,MAAO,QACT,CAAEA,MAAO,SACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,YACT,CAAEA,MAAO,SAEXvB,OAAQ,IACRC,MAAOa,OAAOC,WACdjB,YAAa,CAAE0B,QAAS","file":"static/js/7.520316cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"moveContainer\":\"style_moveContainer__ICRKg\"};","import * as React from \"react\";\nimport cx from \"classcat\";\nimport {\n  AgGridColumn,\n  AgGridReact,\n  AgGridReactProps,\n  AgGridColumnGroupProps,\n  AgGridColumnProps,\n} from \"ag-grid-react\";\nimport styles from \"./AgGrid.module.css\";\n// ag stylings\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\n// ag stylings\nexport const AgGrid = (props: {\n  gridOptions?: AgGridReactProps[\"gridOptions\"];\n  columns: AgGridColumnProps[];\n  height?: number | string;\n  width?: number | string;\n  containerClassName?: string;\n}) => {\n  const { gridOptions, columns, height, width, containerClassName } = props;\n\n  return (\n    <div className={styles.grid}>\n      <div\n        className={cx([\"ag-theme-alpine\", containerClassName])}\n        style={{ height: height, maxWidth: width }}\n      >\n        <AgGridReact {...gridOptions}>\n          {columns.map((item, i) => (\n            <AgGridColumn key={i} {...item} />\n          ))}\n        </AgGridReact>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"AgGrid_grid__11L6p\"};","import * as React from \"react\";\nimport styles from \"./style.module.css\";\nimport { AgGrid } from \"../../components/AgGrid/AgGrid\";\nimport { useParams, useHistory } from \"react-router\";\nimport MovesList from \"./GoldList.json\";\n\nexport default function GoldMoves() {\n  const params = useParams<{ name: string }>();\n\n  type tsteps = {\n    step: string;\n    count: string;\n    footPosition: string;\n    amountOfTurn: string;\n    footwork: string;\n    lead: string;\n  };\n  type tmoves = {\n    name: string;\n    description: string;\n    steps: Array<tsteps>;\n  };\n  return (\n    <div\n      style={{ maxWidth: window.innerWidth }}\n      className={styles.moveContainer}\n    >\n      {/* <h2 className={styles.select}>{currentMoveName ?? \"Choose a Move\"}</h2> */}\n      <select\n        onChange={(e) => {\n          // setCurrentMoveName(e.target.value);\n        }}\n      >\n        <option>Choose a Move</option>\n        {MovesList.map((items: tmoves, x) => {\n          return <option key={x}>{items.name}</option>;\n        })}\n      </select>\n      <AgGrid\n        columns={[\n          { field: \"step\" },\n          { field: \"count\" },\n          { field: \"footPosition\" },\n          { field: \"amountOfTurn\" },\n          { field: \"footwork\" },\n          { field: \"lead\" },\n        ]}\n        height={600}\n        width={window.innerWidth}\n        gridOptions={{ rowData: [] }}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}