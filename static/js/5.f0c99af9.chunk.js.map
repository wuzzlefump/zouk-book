{"version":3,"sources":["screens/Moves/style.module.css","components/AgGrid/AgGrid.tsx","components/AgGrid/AgGrid.module.css","screens/Moves/BronzeMoves.tsx"],"names":["module","exports","AgGrid","props","gridOptions","columns","height","width","containerClassName","className","styles","grid","cx","style","maxWidth","map","item","i","BronzeMoves","history","useHistory","currentName","useParams","name","currentMove","MovesList","find","enum","window","innerWidth","moveContainer","select","onChange","e","console","log","target","value","NewName","trim","undefined","push","items","x","field","cellStyle","autoHeight","rowData","steps"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,cAAgB,+B,0ICarBC,EAAS,SAACC,GAMhB,IACGC,EAA4DD,EAA5DC,YAAaC,EAA+CF,EAA/CE,QAASC,EAAsCH,EAAtCG,OAAQC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBAE7C,OACE,qBAAKC,UAAWC,IAAOC,KAAvB,SACE,qBACEF,UAAWG,YAAG,CAAC,kBAAmBJ,IAClCK,MAAO,CAAEP,OAAQA,EAAQQ,SAAUP,GAFrC,SAIE,cAAC,cAAD,2BAAiBH,GAAjB,aACGC,EAAQU,KAAI,SAACC,EAAMC,GAAP,OACX,cAAC,eAAD,eAA0BD,GAAPC,e,mBC9B/BjB,EAAOC,QAAU,CAAC,KAAO,uB,yiRCDzB,uGAMe,SAASiB,IAAe,IAAD,IAC9BC,EAAUC,cAEZC,EADWC,cACUC,KACrBC,EAAcC,EAAUC,MAAK,SAACV,GAChC,OAAOA,EAAKW,OAASN,KAgBvB,OACE,sBACER,MAAO,CAAEC,SAAUc,OAAOC,YAC1BpB,UAAWC,IAAOoB,cAFpB,UAIE,oBAAIrB,UAAWC,IAAOqB,OAAtB,0BAA+BP,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAaD,YAA5C,QAAoD,kBACpD,yBACES,SAAU,SAACC,GACTC,QAAQC,IAAIF,EAAEG,OAAOC,OAErB,IAAIC,EAAeb,EAAUC,MAAK,SAACV,GACjC,OAAOA,EAAKO,KAAKgB,QAAUN,EAAEG,OAAOC,MAAME,eAGvBC,IAAjBF,EAAQX,MACVR,EAAQsB,KAAR,wBAA8BH,EAAQX,QAT5C,UAaE,mDACCF,EAAUV,KAAI,SAAC2B,EAAYC,GAC1B,OAAO,iCAAiBD,EAAMnB,MAAVoB,SAGxB,cAAC,IAAD,CACEtC,QAAS,CACP,CACEuC,MAAO,OACPrC,MAAO,IACPsC,UAAW,CAAE,cAAe,UAC5BC,YAAY,GAEd,CACEF,MAAO,QACPrC,MAAO,IACPsC,UAAW,CAAE,cAAe,UAC5BC,YAAY,GAEd,CACEF,MAAO,eACPrC,MAAO,IACPsC,UAAW,CAAE,cAAe,UAC5BC,YAAY,GAEd,CACEF,MAAO,eACPrC,MAAO,IACPsC,UAAW,CAAE,cAAe,UAC5BC,YAAY,GAEd,CACEF,MAAO,WACPrC,MAAO,IACPsC,UAAW,CAAE,cAAe,UAC5BC,YAAY,GAEd,CACEF,MAAO,OACPrC,MAAO,IACPsC,UAAW,CAAE,cAAe,UAC5BC,YAAY,IAGhBxC,OAAQ,IACRC,MAAOqB,OAAOC,WACdzB,YAAa,CAAE2C,QAAO,iBAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAawB,aAAf,QAAwB","file":"static/js/5.f0c99af9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"moveContainer\":\"style_moveContainer__ICRKg\"};","import * as React from \"react\";\nimport cx from \"classcat\";\nimport {\n  AgGridColumn,\n  AgGridReact,\n  AgGridReactProps,\n  AgGridColumnGroupProps,\n  AgGridColumnProps,\n} from \"ag-grid-react\";\nimport styles from \"./AgGrid.module.css\";\n// ag stylings\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\n// ag stylings\nexport const AgGrid = (props: {\n  gridOptions?: AgGridReactProps[\"gridOptions\"];\n  columns: AgGridColumnProps[];\n  height?: number | string;\n  width?: number | string;\n  containerClassName?: string;\n}) => {\n  const { gridOptions, columns, height, width, containerClassName } = props;\n\n  return (\n    <div className={styles.grid}>\n      <div\n        className={cx([\"ag-theme-alpine\", containerClassName])}\n        style={{ height: height, maxWidth: width }}\n      >\n        <AgGridReact {...gridOptions}>\n          {columns.map((item, i) => (\n            <AgGridColumn key={i} {...item} />\n          ))}\n        </AgGridReact>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"AgGrid_grid__11L6p\"};","import * as React from \"react\";\nimport styles from \"./style.module.css\";\nimport { AgGrid } from \"../../components/AgGrid/AgGrid\";\nimport { useParams, useHistory } from \"react-router\";\nimport MovesList from \"./BronzeList.json\";\n\nexport default function BronzeMoves() {\n  const history = useHistory();\n  const params = useParams<{ name: string }>();\n  let currentName = params.name;\n  let currentMove = MovesList.find((item: any) => {\n    return item.enum === currentName;\n  });\n\n  type tsteps = {\n    step: string;\n    count: string;\n    footMovement: string;\n    amountOfTurn: string;\n    footwork: string;\n    lead: string;\n  };\n  type tmoves = {\n    name: string;\n    description: string;\n    steps: Array<tsteps>;\n  };\n  return (\n    <div\n      style={{ maxWidth: window.innerWidth }}\n      className={styles.moveContainer}\n    >\n      <h2 className={styles.select}>{currentMove?.name ?? \"Choose a Move\"}</h2>\n      <select\n        onChange={(e) => {\n          console.log(e.target.value);\n\n          let NewName: any = MovesList.find((item) => {\n            return item.name.trim() == e.target.value.trim();\n          });\n\n          if (NewName.enum !== undefined) {\n            history.push(`/moves/bronze/${NewName.enum}`);\n          }\n        }}\n      >\n        <option>Choose a Move</option>\n        {MovesList.map((items: any, x) => {\n          return <option key={x}>{items.name}</option>;\n        })}\n      </select>\n      <AgGrid\n        columns={[\n          {\n            field: \"step\",\n            width: 300,\n            cellStyle: { \"white-space\": \"normal\" },\n            autoHeight: true,\n          },\n          {\n            field: \"count\",\n            width: 300,\n            cellStyle: { \"white-space\": \"normal\" },\n            autoHeight: true,\n          },\n          {\n            field: \"footMovement\",\n            width: 300,\n            cellStyle: { \"white-space\": \"normal\" },\n            autoHeight: true,\n          },\n          {\n            field: \"amountOfTurn\",\n            width: 300,\n            cellStyle: { \"white-space\": \"normal\" },\n            autoHeight: true,\n          },\n          {\n            field: \"footwork\",\n            width: 300,\n            cellStyle: { \"white-space\": \"normal\" },\n            autoHeight: true,\n          },\n          {\n            field: \"lead\",\n            width: 300,\n            cellStyle: { \"white-space\": \"normal\" },\n            autoHeight: true,\n          },\n        ]}\n        height={600}\n        width={window.innerWidth}\n        gridOptions={{ rowData: currentMove?.steps ?? [] }}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}