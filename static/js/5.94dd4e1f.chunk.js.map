{"version":3,"sources":["screens/Moves/style.module.css","components/AgGrid/AgGrid.tsx","components/AgGrid/AgGrid.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","screens/Moves/BronzeMoves.tsx"],"names":["module","exports","AgGrid","props","gridOptions","columns","height","width","containerClassName","className","styles","grid","cx","style","maxWidth","map","item","i","_arrayLikeToArray","arr","len","length","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","BronzeMoves","React","currentMoveName","setCurrentMoveName","useParams","window","innerWidth","moveContainer","select","onChange","e","target","MovesList","items","x","field","rowData"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,cAAgB,+B,0ICarBC,EAAS,SAACC,GAMhB,IACGC,EAA4DD,EAA5DC,YAAaC,EAA+CF,EAA/CE,QAASC,EAAsCH,EAAtCG,OAAQC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBAE7C,OACE,qBAAKC,UAAWC,IAAOC,KAAvB,SACE,qBACEF,UAAWG,YAAG,CAAC,kBAAmBJ,IAClCK,MAAO,CAAEP,OAAQA,EAAQQ,SAAUP,GAFrC,SAIE,cAAC,cAAD,2BAAiBH,GAAjB,aACGC,EAAQU,KAAI,SAACC,EAAMC,GAAP,OACX,cAAC,eAAD,eAA0BD,GAAPC,e,mBC9B/BjB,EAAOC,QAAU,CAAC,KAAO,uB,gCCDV,SAASiB,EAAkBC,EAAKC,IAClC,MAAPA,GAAeA,EAAMD,EAAIE,UAAQD,EAAMD,EAAIE,QAE/C,IAAK,IAAIJ,EAAI,EAAGK,EAAO,IAAIC,MAAMH,GAAMH,EAAIG,EAAKH,IAC9CK,EAAKL,GAAKE,EAAIF,GAGhB,OAAOK,ECHM,SAASE,EAAeL,EAAKF,GAC1C,OCLa,SAAyBE,GACtC,GAAII,MAAME,QAAQN,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKF,GACjD,GAAsB,qBAAXS,QAA4BA,OAAOC,YAAYC,OAAOT,GAAjE,CACA,IAAIU,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKhB,EAAIO,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAETtB,GAAKY,EAAKR,SAAWJ,GAH8Ca,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBV,EAAKF,IGJ3C,SAAqCwB,EAAGC,GACrD,GAAKD,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAO,EAAiBA,EAAGC,GACtD,IAAIC,EAAIf,OAAOgB,UAAUC,SAASC,KAAKL,GAAGM,MAAM,GAAI,GAEpD,MADU,WAANJ,GAAkBF,EAAEO,cAAaL,EAAIF,EAAEO,YAAYC,MAC7C,QAANN,GAAqB,QAANA,EAAoBpB,MAAM2B,KAAKT,GACxC,cAANE,GAAqB,2CAA2CQ,KAAKR,GAAW,EAAiBF,EAAGC,QAAxG,GHF8D,CAA2BvB,EAAKF,IILjF,WACb,MAAM,IAAImC,UAAU,6IJIgF,G,g6CKCvF,SAASC,IAAe,IAAD,EACUC,WAC5C,MAFkC,mBAC7BC,EAD6B,KACZC,EADY,KAIrBC,cAgBf,OADAH,aAAgB,cAAU,CAACC,IAEzB,sBACE1C,MAAO,CAAEC,SAAU4C,OAAOC,YAC1BlD,UAAWC,IAAOkD,cAFpB,UAIE,oBAAInD,UAAWC,IAAOmD,OAAtB,gBAA+BN,QAA/B,IAA+BA,IAAmB,kBAClD,yBACEO,SAAU,SAACC,GACTP,EAAmBO,EAAEC,OAAOzB,QAFhC,UAKE,mDACC0B,EAAUlD,KAAI,SAACmD,EAAeC,GAC7B,OAAO,iCAAiBD,EAAMjB,MAAVkB,SAGxB,cAAC,IAAD,CACE9D,QAAS,CACP,CAAE+D,MAAO,QACT,CAAEA,MAAO,SACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,YACT,CAAEA,MAAO,SAEX9D,OAAQ,IACRC,MAAOmD,OAAOC,WACdvD,YAAa,CAAEiE,QAAS","file":"static/js/5.94dd4e1f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"moveContainer\":\"style_moveContainer__ICRKg\"};","import * as React from \"react\";\nimport cx from \"classcat\";\nimport {\n  AgGridColumn,\n  AgGridReact,\n  AgGridReactProps,\n  AgGridColumnGroupProps,\n  AgGridColumnProps,\n} from \"ag-grid-react\";\nimport styles from \"./AgGrid.module.css\";\n// ag stylings\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\n// ag stylings\nexport const AgGrid = (props: {\n  gridOptions?: AgGridReactProps[\"gridOptions\"];\n  columns: AgGridColumnProps[];\n  height?: number | string;\n  width?: number | string;\n  containerClassName?: string;\n}) => {\n  const { gridOptions, columns, height, width, containerClassName } = props;\n\n  return (\n    <div className={styles.grid}>\n      <div\n        className={cx([\"ag-theme-alpine\", containerClassName])}\n        style={{ height: height, maxWidth: width }}\n      >\n        <AgGridReact {...gridOptions}>\n          {columns.map((item, i) => (\n            <AgGridColumn key={i} {...item} />\n          ))}\n        </AgGridReact>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"AgGrid_grid__11L6p\"};","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import * as React from \"react\";\nimport styles from \"./style.module.css\";\nimport { AgGrid } from \"../../components/AgGrid/AgGrid\";\nimport { useParams, useHistory } from \"react-router\";\nimport MovesList from \"./BronzeList.json\";\n\nexport default function BronzeMoves() {\n  const [currentMoveName, setCurrentMoveName] = React.useState<string | null>(\n    null\n  );\n  const params = useParams<{ name: string }>();\n\n  type tsteps = {\n    step: string;\n    count: string;\n    footPosition: string;\n    amountOfTurn: string;\n    footwork: string;\n    lead: string;\n  };\n  type tmoves = {\n    name: string;\n    description: string;\n    steps: Array<tsteps>;\n  };\n  React.useEffect(() => {}, [currentMoveName]);\n  return (\n    <div\n      style={{ maxWidth: window.innerWidth }}\n      className={styles.moveContainer}\n    >\n      <h2 className={styles.select}>{currentMoveName ?? \"Choose a Move\"}</h2>\n      <select\n        onChange={(e) => {\n          setCurrentMoveName(e.target.value);\n        }}\n      >\n        <option>Choose a Move</option>\n        {MovesList.map((items: tmoves, x) => {\n          return <option key={x}>{items.name}</option>;\n        })}\n      </select>\n      <AgGrid\n        columns={[\n          { field: \"step\" },\n          { field: \"count\" },\n          { field: \"footPosition\" },\n          { field: \"amountOfTurn\" },\n          { field: \"footwork\" },\n          { field: \"lead\" },\n        ]}\n        height={600}\n        width={window.innerWidth}\n        gridOptions={{ rowData: [] }}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}